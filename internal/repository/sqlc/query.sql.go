// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertEvents = `-- name: InsertEvents :one
insert into events (id, name, description, date, created_at, updated_at) values ($1, $2, $3, $4, current_timestamp, current_timestamp) returning id
`

type InsertEventsParams struct {
	ID          int32
	Name        string
	Description string
	Date        pgtype.Timestamp
}

func (q *Queries) InsertEvents(ctx context.Context, arg InsertEventsParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertEvents,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Date,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertVacancies = `-- name: InsertVacancies :one
insert into vacancies (id, name, description, email, created_at, updated_at) values ($1, $2, $3, $4, current_timestamp, current_timestamp) returning id
`

type InsertVacanciesParams struct {
	ID          int32
	Name        string
	Description string
	Email       pgtype.Text
}

func (q *Queries) InsertVacancies(ctx context.Context, arg InsertVacanciesParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertVacancies,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Email,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, description, image, date, created_at, updated_at FROM events ORDER BY id DESC LIMIT $1 OFFSET $2
`

type ListEventsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVacancies = `-- name: ListVacancies :many
select id, name, description, email, created_at, updated_at, show from vacancies ORDER BY id DESC LIMIT $1 OFFSET $2
`

type ListVacanciesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListVacancies(ctx context.Context, arg ListVacanciesParams) ([]Vacancy, error) {
	rows, err := q.db.Query(ctx, listVacancies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vacancy
	for rows.Next() {
		var i Vacancy
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Show,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
